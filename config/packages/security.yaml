security:
    password_hashers:
        App\Domain\Document\Security\Administrator:
            algorithm: argon2i
            migrate_from:
                - bcrypt
    providers:
        _mongo_provider:
            id: App\Infrastructure\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            custom_authenticators:
                - App\Infrastructure\Security\GoogleAuthenticator
            form_login:
                login_path: login
                check_path: login
                username_parameter: username
                password_parameter: password
            lazy: true
            entry_point: form_login
            provider: _mongo_provider
            logout:
                path: logout
                target: login
            user_checker: App\Infrastructure\Security\UserChecker

            two_factor:
                auth_form_path: 2fa_login
                check_path: 2fa_login_check


    access_control:
         - { path: ^/healthcheck/, roles: PUBLIC_ACCESS }
         - { path: ^/connect, roles: PUBLIC_ACCESS }
         - { path: ^/setup/accounts$, roles: PUBLIC_ACCESS }
         - { path: ^/login$, roles: PUBLIC_ACCESS }
         - { path: ^/forgot, roles: PUBLIC_ACCESS }
         - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
         - { path: ^/logout, role: PUBLIC_ACCESS }
         - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
